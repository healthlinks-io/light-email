/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.networknt.email;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EmailCreatedEvent extends org.apache.avro.specific.SpecificRecordBase implements EmailEvent {
  private static final long serialVersionUID = -2310763384622035271L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmailCreatedEvent\",\"namespace\":\"com.networknt.email\",\"fields\":[{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"A generated unique event id to identify the email\"},{\"name\":\"from\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the from address of the email\"},{\"name\":\"to\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the to addresses of the email\"},{\"name\":\"cc\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the cc addresses of the email\",\"default\":null},{\"name\":\"bcc\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"the bcc addresses of the email\",\"default\":null},{\"name\":\"subject\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the subject of the email\"},{\"name\":\"text\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the text of the email\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the description of the email\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EmailCreatedEvent> ENCODER =
      new BinaryMessageEncoder<EmailCreatedEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EmailCreatedEvent> DECODER =
      new BinaryMessageDecoder<EmailCreatedEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EmailCreatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EmailCreatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EmailCreatedEvent>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EmailCreatedEvent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EmailCreatedEvent from a ByteBuffer. */
  public static EmailCreatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** A generated unique event id to identify the email */
  @Deprecated public java.lang.String eventId;
  /** the from address of the email */
  @Deprecated public java.lang.String from;
  /** the to addresses of the email */
  @Deprecated public java.lang.String to;
  /** the cc addresses of the email */
  @Deprecated public java.lang.String cc;
  /** the bcc addresses of the email */
  @Deprecated public java.lang.String bcc;
  /** the subject of the email */
  @Deprecated public java.lang.String subject;
  /** the text of the email */
  @Deprecated public java.lang.String text;
  /** the description of the email */
  @Deprecated public java.lang.String description;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EmailCreatedEvent() {}

  /**
   * All-args constructor.
   * @param eventId A generated unique event id to identify the email
   * @param from the from address of the email
   * @param to the to addresses of the email
   * @param cc the cc addresses of the email
   * @param bcc the bcc addresses of the email
   * @param subject the subject of the email
   * @param text the text of the email
   * @param description the description of the email
   */
  public EmailCreatedEvent(java.lang.String eventId, java.lang.String from, java.lang.String to, java.lang.String cc, java.lang.String bcc, java.lang.String subject, java.lang.String text, java.lang.String description) {
    this.eventId = eventId;
    this.from = from;
    this.to = to;
    this.cc = cc;
    this.bcc = bcc;
    this.subject = subject;
    this.text = text;
    this.description = description;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventId;
    case 1: return from;
    case 2: return to;
    case 3: return cc;
    case 4: return bcc;
    case 5: return subject;
    case 6: return text;
    case 7: return description;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventId = (java.lang.String)value$; break;
    case 1: from = (java.lang.String)value$; break;
    case 2: to = (java.lang.String)value$; break;
    case 3: cc = (java.lang.String)value$; break;
    case 4: bcc = (java.lang.String)value$; break;
    case 5: subject = (java.lang.String)value$; break;
    case 6: text = (java.lang.String)value$; break;
    case 7: description = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return A generated unique event id to identify the email
   */
  public java.lang.String getEventId() {
    return eventId;
  }

  /**
   * Sets the value of the 'eventId' field.
   * A generated unique event id to identify the email
   * @param value the value to set.
   */
  public void setEventId(java.lang.String value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'from' field.
   * @return the from address of the email
   */
  public java.lang.String getFrom() {
    return from;
  }

  /**
   * Sets the value of the 'from' field.
   * the from address of the email
   * @param value the value to set.
   */
  public void setFrom(java.lang.String value) {
    this.from = value;
  }

  /**
   * Gets the value of the 'to' field.
   * @return the to addresses of the email
   */
  public java.lang.String getTo() {
    return to;
  }

  /**
   * Sets the value of the 'to' field.
   * the to addresses of the email
   * @param value the value to set.
   */
  public void setTo(java.lang.String value) {
    this.to = value;
  }

  /**
   * Gets the value of the 'cc' field.
   * @return the cc addresses of the email
   */
  public java.lang.String getCc() {
    return cc;
  }

  /**
   * Sets the value of the 'cc' field.
   * the cc addresses of the email
   * @param value the value to set.
   */
  public void setCc(java.lang.String value) {
    this.cc = value;
  }

  /**
   * Gets the value of the 'bcc' field.
   * @return the bcc addresses of the email
   */
  public java.lang.String getBcc() {
    return bcc;
  }

  /**
   * Sets the value of the 'bcc' field.
   * the bcc addresses of the email
   * @param value the value to set.
   */
  public void setBcc(java.lang.String value) {
    this.bcc = value;
  }

  /**
   * Gets the value of the 'subject' field.
   * @return the subject of the email
   */
  public java.lang.String getSubject() {
    return subject;
  }

  /**
   * Sets the value of the 'subject' field.
   * the subject of the email
   * @param value the value to set.
   */
  public void setSubject(java.lang.String value) {
    this.subject = value;
  }

  /**
   * Gets the value of the 'text' field.
   * @return the text of the email
   */
  public java.lang.String getText() {
    return text;
  }

  /**
   * Sets the value of the 'text' field.
   * the text of the email
   * @param value the value to set.
   */
  public void setText(java.lang.String value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return the description of the email
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * the description of the email
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Creates a new EmailCreatedEvent RecordBuilder.
   * @return A new EmailCreatedEvent RecordBuilder
   */
  public static com.networknt.email.EmailCreatedEvent.Builder newBuilder() {
    return new com.networknt.email.EmailCreatedEvent.Builder();
  }

  /**
   * Creates a new EmailCreatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EmailCreatedEvent RecordBuilder
   */
  public static com.networknt.email.EmailCreatedEvent.Builder newBuilder(com.networknt.email.EmailCreatedEvent.Builder other) {
    return new com.networknt.email.EmailCreatedEvent.Builder(other);
  }

  /**
   * Creates a new EmailCreatedEvent RecordBuilder by copying an existing EmailCreatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new EmailCreatedEvent RecordBuilder
   */
  public static com.networknt.email.EmailCreatedEvent.Builder newBuilder(com.networknt.email.EmailCreatedEvent other) {
    return new com.networknt.email.EmailCreatedEvent.Builder(other);
  }

  /**
   * RecordBuilder for EmailCreatedEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EmailCreatedEvent>
    implements org.apache.avro.data.RecordBuilder<EmailCreatedEvent> {

    /** A generated unique event id to identify the email */
    private java.lang.String eventId;
    /** the from address of the email */
    private java.lang.String from;
    /** the to addresses of the email */
    private java.lang.String to;
    /** the cc addresses of the email */
    private java.lang.String cc;
    /** the bcc addresses of the email */
    private java.lang.String bcc;
    /** the subject of the email */
    private java.lang.String subject;
    /** the text of the email */
    private java.lang.String text;
    /** the description of the email */
    private java.lang.String description;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.networknt.email.EmailCreatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.from)) {
        this.from = data().deepCopy(fields()[1].schema(), other.from);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.to)) {
        this.to = data().deepCopy(fields()[2].schema(), other.to);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cc)) {
        this.cc = data().deepCopy(fields()[3].schema(), other.cc);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.bcc)) {
        this.bcc = data().deepCopy(fields()[4].schema(), other.bcc);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.subject)) {
        this.subject = data().deepCopy(fields()[5].schema(), other.subject);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.text)) {
        this.text = data().deepCopy(fields()[6].schema(), other.text);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.description)) {
        this.description = data().deepCopy(fields()[7].schema(), other.description);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EmailCreatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.networknt.email.EmailCreatedEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.from)) {
        this.from = data().deepCopy(fields()[1].schema(), other.from);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.to)) {
        this.to = data().deepCopy(fields()[2].schema(), other.to);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cc)) {
        this.cc = data().deepCopy(fields()[3].schema(), other.cc);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.bcc)) {
        this.bcc = data().deepCopy(fields()[4].schema(), other.bcc);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.subject)) {
        this.subject = data().deepCopy(fields()[5].schema(), other.subject);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.text)) {
        this.text = data().deepCopy(fields()[6].schema(), other.text);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.description)) {
        this.description = data().deepCopy(fields()[7].schema(), other.description);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'eventId' field.
      * A generated unique event id to identify the email
      * @return The value.
      */
    public java.lang.String getEventId() {
      return eventId;
    }

    /**
      * Sets the value of the 'eventId' field.
      * A generated unique event id to identify the email
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.networknt.email.EmailCreatedEvent.Builder setEventId(java.lang.String value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * A generated unique event id to identify the email
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventId' field.
      * A generated unique event id to identify the email
      * @return This builder.
      */
    public com.networknt.email.EmailCreatedEvent.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'from' field.
      * the from address of the email
      * @return The value.
      */
    public java.lang.String getFrom() {
      return from;
    }

    /**
      * Sets the value of the 'from' field.
      * the from address of the email
      * @param value The value of 'from'.
      * @return This builder.
      */
    public com.networknt.email.EmailCreatedEvent.Builder setFrom(java.lang.String value) {
      validate(fields()[1], value);
      this.from = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'from' field has been set.
      * the from address of the email
      * @return True if the 'from' field has been set, false otherwise.
      */
    public boolean hasFrom() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'from' field.
      * the from address of the email
      * @return This builder.
      */
    public com.networknt.email.EmailCreatedEvent.Builder clearFrom() {
      from = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'to' field.
      * the to addresses of the email
      * @return The value.
      */
    public java.lang.String getTo() {
      return to;
    }

    /**
      * Sets the value of the 'to' field.
      * the to addresses of the email
      * @param value The value of 'to'.
      * @return This builder.
      */
    public com.networknt.email.EmailCreatedEvent.Builder setTo(java.lang.String value) {
      validate(fields()[2], value);
      this.to = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'to' field has been set.
      * the to addresses of the email
      * @return True if the 'to' field has been set, false otherwise.
      */
    public boolean hasTo() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'to' field.
      * the to addresses of the email
      * @return This builder.
      */
    public com.networknt.email.EmailCreatedEvent.Builder clearTo() {
      to = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'cc' field.
      * the cc addresses of the email
      * @return The value.
      */
    public java.lang.String getCc() {
      return cc;
    }

    /**
      * Sets the value of the 'cc' field.
      * the cc addresses of the email
      * @param value The value of 'cc'.
      * @return This builder.
      */
    public com.networknt.email.EmailCreatedEvent.Builder setCc(java.lang.String value) {
      validate(fields()[3], value);
      this.cc = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'cc' field has been set.
      * the cc addresses of the email
      * @return True if the 'cc' field has been set, false otherwise.
      */
    public boolean hasCc() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'cc' field.
      * the cc addresses of the email
      * @return This builder.
      */
    public com.networknt.email.EmailCreatedEvent.Builder clearCc() {
      cc = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'bcc' field.
      * the bcc addresses of the email
      * @return The value.
      */
    public java.lang.String getBcc() {
      return bcc;
    }

    /**
      * Sets the value of the 'bcc' field.
      * the bcc addresses of the email
      * @param value The value of 'bcc'.
      * @return This builder.
      */
    public com.networknt.email.EmailCreatedEvent.Builder setBcc(java.lang.String value) {
      validate(fields()[4], value);
      this.bcc = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'bcc' field has been set.
      * the bcc addresses of the email
      * @return True if the 'bcc' field has been set, false otherwise.
      */
    public boolean hasBcc() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'bcc' field.
      * the bcc addresses of the email
      * @return This builder.
      */
    public com.networknt.email.EmailCreatedEvent.Builder clearBcc() {
      bcc = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'subject' field.
      * the subject of the email
      * @return The value.
      */
    public java.lang.String getSubject() {
      return subject;
    }

    /**
      * Sets the value of the 'subject' field.
      * the subject of the email
      * @param value The value of 'subject'.
      * @return This builder.
      */
    public com.networknt.email.EmailCreatedEvent.Builder setSubject(java.lang.String value) {
      validate(fields()[5], value);
      this.subject = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'subject' field has been set.
      * the subject of the email
      * @return True if the 'subject' field has been set, false otherwise.
      */
    public boolean hasSubject() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'subject' field.
      * the subject of the email
      * @return This builder.
      */
    public com.networknt.email.EmailCreatedEvent.Builder clearSubject() {
      subject = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'text' field.
      * the text of the email
      * @return The value.
      */
    public java.lang.String getText() {
      return text;
    }

    /**
      * Sets the value of the 'text' field.
      * the text of the email
      * @param value The value of 'text'.
      * @return This builder.
      */
    public com.networknt.email.EmailCreatedEvent.Builder setText(java.lang.String value) {
      validate(fields()[6], value);
      this.text = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'text' field has been set.
      * the text of the email
      * @return True if the 'text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'text' field.
      * the text of the email
      * @return This builder.
      */
    public com.networknt.email.EmailCreatedEvent.Builder clearText() {
      text = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * the description of the email
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * the description of the email
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.networknt.email.EmailCreatedEvent.Builder setDescription(java.lang.String value) {
      validate(fields()[7], value);
      this.description = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * the description of the email
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'description' field.
      * the description of the email
      * @return This builder.
      */
    public com.networknt.email.EmailCreatedEvent.Builder clearDescription() {
      description = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EmailCreatedEvent build() {
      try {
        EmailCreatedEvent record = new EmailCreatedEvent();
        record.eventId = fieldSetFlags()[0] ? this.eventId : (java.lang.String) defaultValue(fields()[0]);
        record.from = fieldSetFlags()[1] ? this.from : (java.lang.String) defaultValue(fields()[1]);
        record.to = fieldSetFlags()[2] ? this.to : (java.lang.String) defaultValue(fields()[2]);
        record.cc = fieldSetFlags()[3] ? this.cc : (java.lang.String) defaultValue(fields()[3]);
        record.bcc = fieldSetFlags()[4] ? this.bcc : (java.lang.String) defaultValue(fields()[4]);
        record.subject = fieldSetFlags()[5] ? this.subject : (java.lang.String) defaultValue(fields()[5]);
        record.text = fieldSetFlags()[6] ? this.text : (java.lang.String) defaultValue(fields()[6]);
        record.description = fieldSetFlags()[7] ? this.description : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EmailCreatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<EmailCreatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EmailCreatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<EmailCreatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
